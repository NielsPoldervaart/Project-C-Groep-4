{
	"info": {
		"_postman_id": "3345f08c-964f-4310-95d9-e39b0bae5023",
		"name": "Flask Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Security tests before logging in",
			"item": [
				{
					"name": "Company info Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Company info should fail',\r",
									"    function(){\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.errorCode).to.eql(401); //response message must convey 401\r",
									"        pm.response.to.have.status(401); ///response code must be 401\r",
									"    }\r",
									")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/company/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"company",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Template info Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Template info should fail',\r",
									"    function(){\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.errorCode).to.eql(401); //response message must convey 401\r",
									"        pm.response.to.have.status(401); ///response code must be 401\r",
									"    }\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				},
				{
					"name": "Product info Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product info should fail',\r",
									"    function(){\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.errorCode).to.eql(401); //response message must convey 401\r",
									"        pm.response.to.have.status(401); ///response code must be 401\r",
									"    }\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				},
				{
					"name": "Image info Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Image info should fail',\r",
									"    function(){\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.errorCode).to.eql(401); //response message must convey 401\r",
									"        pm.response.to.have.status(401); ///response code must be 401\r",
									"    }\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				},
				{
					"name": "Guide info Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Guide info should fail',\r",
									"    function(){\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.errorCode).to.eql(401); //response message must convey 401\r",
									"        pm.response.to.have.status(401); ///response code must be 401\r",
									"    }\r",
									")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Login Existing account",
			"item": [
				{
					"name": "Login Fail (Password)",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Fail (Username)",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Pass",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"A@hr.nl\",\r\n    \"password\":\"KYNDA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register new account",
			"item": []
		},
		{
			"name": "Logout Existing account",
			"item": []
		},
		{
			"name": "Login Created account",
			"item": []
		},
		{
			"name": "Company",
			"item": []
		},
		{
			"name": "Templates",
			"item": []
		},
		{
			"name": "Images",
			"item": []
		},
		{
			"name": "Products",
			"item": []
		},
		{
			"name": "Guide",
			"item": []
		},
		{
			"name": "Logout Created account",
			"item": [
				{
					"name": "Logout Pass",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/logout",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Secury tests after logging out",
			"item": []
		}
	]
}